pipeline {
  agent {
    docker {
      image 'ritvikrj99/maven-ritvik-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/ritvikraj-cse/Projects.git'
      }
    }
    stage('Build and Test') {
      steps {
        dir('Jenkins/Docker_as_agent/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh 'ls -ltr'
          sh 'mvn clean package' // build the project and create a JAR file
        }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://34.201.116.83:9000"
      }
      steps {
        dir('Jenkins/Docker_as_agent/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
            sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
          }
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ritvikrj99/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        dir('Jenkins/Docker_as_agent/java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
              dockerImage.push()
            }
          }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Projects"
            GIT_USER_NAME = "ritvikraj-cse"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                dir('Jenkins/Docker_as_agent/java-maven-sonar-argocd-helm-k8s') {
                    sh '''
                        git config user.email "ritvikraj.cse@gmail.com"
                        git config user.name "Ritvik Raj"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                        git add spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
  }
}
